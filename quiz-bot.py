from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery,
)
import os
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ë–∞–∑–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
questions = [
    {
        "question": "–ö–∞–∫–∞—è —Å—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?",
        "options": ["–ü–∞—Ä–∏–∂", "–õ–æ–Ω–¥–æ–Ω", "–ë–µ—Ä–ª–∏–Ω"],
        "correct": "–ü–∞—Ä–∏–∂",
    },
    {
        "question": "–°–∫–æ–ª—å–∫–æ —Ü–≤–µ—Ç–æ–≤ –≤ —Ä–∞–¥—É–≥–µ?",
        "options": ["5", "7", "6"],
        "correct": "7",
    },
    {
        "question": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–∞ –Ø–ø–æ–Ω–∏–∏?",
        "options": ["–ü–µ–∫–∏–Ω", "–¢–æ–∫–∏–æ", "–°–µ—É–ª"],
        "correct": "–¢–æ–∫–∏–æ",
    },
]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
current_question_index = 0
score = 0


# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command(commands=["start"]))
async def cmd_start(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø Quiz Bot. –ù–∞–ø–∏—à–∏ /quiz —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É!")


# –ö–æ–º–∞–Ω–¥–∞ /quiz
@dp.message(Command(commands=["quiz"]))
async def cmd_quiz(message: Message):
    global current_question_index, score
    current_question_index = 0
    score = 0
    await send_question(message)


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
async def send_question(message: Message):
    question_data = questions[current_question_index]
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=option, callback_data=f"answer_{option}")]
            for option in question_data["options"]
        ]
    )
    await message.answer(question_data["question"], reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
@dp.callback_query(F.data.startswith("answer_"))
async def process_answer(callback: CallbackQuery):
    global current_question_index, score

    user_answer = callback.data.replace("answer_", "")
    correct_answer = questions[current_question_index]["correct"]

    if user_answer == correct_answer:
        await callback.message.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
        score += 1
    else:
        await callback.message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}")

    current_question_index += 1

    if current_question_index < len(questions):
        await send_question(callback.message)
    else:
        await callback.message.answer(f"üèÅ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!\n–¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} –∏–∑ {len(questions)}")
        await callback.message.answer("–ù–∞–ø–∏—à–∏ /quiz —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    dp.run_polling(bot)